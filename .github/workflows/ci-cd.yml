name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  test:
    name: Build test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '22'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate Prisma client
      run: pnpm exec prisma generate
    
    - name: Build project
      run: pnpm run build
      
    - name: Type check
      run: pnpm exec tsc --noEmit
      
    - name: Run tests (if exists)
      run: pnpm test --if-present

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Build Docker image
      run: docker build -t git-plants-backend .
      
    - name: Test Docker image
      run: docker run --rm git-plants-backend echo "Docker build successful"

  migrate:
    name: Deploy & Migrate
    needs: [test, docker]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '22'
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Wait for Render deployment
      run: |
        echo "‚è≥ Waiting for Render deployment to complete..."
        sleep 60
    
    - name: Run database migrations and test connections
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
      run: |
        echo "üîÑ Running Prisma database migrations..."
        pnpm exec prisma migrate deploy
        echo "‚úÖ Database migrations completed!"
        
        echo "üîç Testing database connectivity..."
        node -e "
          const { PrismaClient } = require('@prisma/client');
          const prisma = new PrismaClient();
          prisma.\$queryRaw\`SELECT 1\`.then(() => {
            console.log('‚úÖ Database connection test passed!');
            prisma.\$disconnect();
          }).catch(err => {
            console.error('‚ùå Database connection test failed:', err.message);
            process.exit(1);
          });
        "
        
        echo "üîç Testing Redis connectivity..."
        node -e "
          const { createClient } = require('redis');
          if (!process.env.REDIS_URL) {
            console.log('‚ö†Ô∏è REDIS_URL not set, skipping Redis test');
            process.exit(0);
          }
          const redis = createClient({ url: process.env.REDIS_URL });
          redis.connect().then(() => redis.ping()).then(result => {
            console.log('‚úÖ Redis connection test passed! PING:', result);
            redis.disconnect();
          }).catch(err => {
            console.log('‚ö†Ô∏è Redis connection test failed (non-critical):', err.message);
          });
        "

  notify:
    name: Notification
    needs: [migrate]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deployment notification
      run: |
        if [ "${{ needs.migrate.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful! All health checks passed."
        else
          echo "‚ö†Ô∏è Deployment completed but some health checks failed."
        fi