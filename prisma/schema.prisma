generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  githubId        String           @unique
  username        String
  accessToken     String
  image           String?
  sessions        Session[]
  githubActivities GitHubActivity[]
  plants          Plant[]
  seeds           Seed[]
  userItems       UserItem[]
  userBadges      UserBadge[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  superUser       SuperUser?       // 관리자일 경우 연결
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GitHubActivity {
  id                String   @id @default(cuid())
  userId            String
  type              String   // Contribution, Commit, PullRequest
  repository        String
  title             String
  description       String?  @db.Text
  url               String
  eventId           String   @unique
  contributionCount Int?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Plant {
  id           String     @id @default(cuid())
  userId       String
  name         String
  stage        GrowthStage @default(SEED)
  currentContributions Int @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  growthLogs   GrowthLog[]

  @@index([userId])
}

enum GrowthStage {
  SEED        // 0~9
  SPROUT      // 10~29
  GROWING     // 30~49
  MATURE      // 50~69
  HARVEST     // 70~100
}

model GrowthLog {
  id        String   @id @default(cuid())
  plantId   String
  log       String   @db.Text
  count     Int
  createdAt DateTime @default(now())
  plant     Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([plantId])
}

model Seed {
  id        String   @id @default(cuid())
  userId    String
  type      String
  obtainedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GardenItem {
  id         String   @id @default(cuid())
  name       String
  category   String   // BACKGROUND, POT, etc
  imageUrl   String
  price      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  updatedById String?
  updatedBy   SuperUser? @relation("GardenItemUpdatedBy", fields: [updatedById], references: [id])
  userItems  UserItem[]
}

model UserItem {
  id            String     @id @default(cuid())
  userId        String
  itemId        String
  equipped      Boolean    @default(false)
  acquiredAt    DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  item          GardenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemId])
}

model Badge {
  id         String   @id @default(cuid())
  name       String
  condition  String   // 자동 지급 조건 설명
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  updatedById String?
  updatedBy   SuperUser? @relation("BadgeUpdatedBy", fields: [updatedById], references: [id])
  userBadges UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([badgeId])
}

model MonthlyPlant {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  imageUrl      String
  month         Int
  year          Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  updatedById   String?
  updatedBy     SuperUser? @relation("MonthlyPlantUpdatedBy", fields: [updatedById], references: [id])
}

model SuperUser {
  id           String     @id @default(cuid())
  userId       String     @unique
  role         AdminRole  @default(ADMIN)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // 관리 리소스 추적용
  plantEdits   MonthlyPlant[] @relation("MonthlyPlantUpdatedBy")
  itemEdits    GardenItem[]   @relation("GardenItemUpdatedBy")
  badgeEdits   Badge[]        @relation("BadgeUpdatedBy")
}

enum AdminRole {
  ADMIN
  CONTENT
  SHOP_MANAGER
}