generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  githubId         String           @unique
  username         String
  accessToken      String
  image            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  githubActivities GitHubActivity[]
  plants           Plant[]
  seeds            Seed?
  refreshTokens    RefreshToken[]
  superUser        SuperUser?
  userBadges       UserBadge[]
  userItems        UserItem[]
}

model GitHubActivity {
  id                String   @id @default(cuid())
  userId            String
  type              String
  repository        String
  title             String
  description       String?
  url               String
  eventId           String   @unique
  contributionCount Int?
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Plant {
  id                   String      @id @default(cuid())
  userId               String
  name                 String
  imageUrls            String[]
  stage                GrowthStage @default(SEED)
  currentContributions Int         @default(0)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  growthLogs           GrowthLog[]
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GrowthLog {
  id        String   @id @default(cuid())
  plantId   String
  log       String
  count     Int
  createdAt DateTime @default(now())
  plant     Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@index([plantId])
}

model Seed {
  userId String @id
  count  Int    @default(0)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GardenItem {
  name        String
  category    String
  mode        String?
  imageUrl    String
  iconUrl     String
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  updatedById String?
  id          Int        @id @default(autoincrement())
  updatedBy   SuperUser? @relation("GardenItemUpdatedBy", fields: [updatedById], references: [id])
  userItems   UserItem[]
}

model UserItem {
  id         String     @id @default(cuid())
  userId     String
  equipped   Boolean    @default(false)
  acquiredAt DateTime   @default(now())
  itemId     Int
  item       GardenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itemId])
}

model Badge {
  name        String
  condition   String
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  updatedById String?
  id          Int         @id @default(autoincrement())
  updatedBy   SuperUser?  @relation("BadgeUpdatedBy", fields: [updatedById], references: [id])
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  awardedAt DateTime @default(now())
  badgeId   Int
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([badgeId])
}

model MonthlyPlant {
  title       String
  description String
  imageUrl    String
  month       Int
  year        Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  updatedById String?
  id          Int        @id @default(autoincrement())
  updatedBy   SuperUser? @relation("MonthlyPlantUpdatedBy", fields: [updatedById], references: [id])
}

model SuperUser {
  id         String         @id @default(cuid())
  userId     String         @unique
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  badgeEdits Badge[]        @relation("BadgeUpdatedBy")
  itemEdits  GardenItem[]   @relation("GardenItemUpdatedBy")
  plantEdits MonthlyPlant[] @relation("MonthlyPlantUpdatedBy")
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

enum GrowthStage {
  SEED
  SPROUT
  GROWING
  MATURE
  HARVEST
}
